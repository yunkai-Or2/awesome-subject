#!/bin/bash
#
# description: {{APP_KEY}} init script
# processname: tomcat
# chkconfig: 234 20 80
if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi

APP_KEY="{{APP_KEY}}"
USER="deploy"


### paths
if [[ "$PROJECT_DIR" == "" ]]
then
PROJECT_DIR=/opt/app/${APP_KEY}/latest/
fi
MAIN_CLASS="{{MAIN_CLASS}}"
START_OPTS="$START_OPTS -DAPP_KEY=$APP_KEY -DbasicConf.host=https://fat-basicconf.m6e.cn"
START_OPTS="$START_OPTS -Dapollo.meta=http://fat-apollo.m6e.cn:10080"

START_OPTS="$START_OPTS -Ddubbo.group=fat -Ddubbo.server.tag.ignore=true"

START_OPTS="$START_OPTS -Ddubbo.register.url=fat-dubbozk1.m6e.com:2181,fat-dubbozk2.m6e.com:2181,fat-dubbozk3.m6e.com:2181"
START_OPTS="$START_OPTS -Ddubbo.auth.url=https://fat-basicconf.m6e.cn"
MEM_SIZE=`cat /proc/meminfo |grep MemTotal|awk '{print $2}'`
CPU_Count=`cat /proc/cpuinfo | grep "processor" | wc -l`

START_OPTS="$START_OPTS -Ddubbo.logRequest=true"
START_OPTS="$START_OPTS -Ddubbo.logResponse=true"

START_OPTS="$START_OPTS -Ddubbo.server.tag.mandatory=false"
START_OPTS="$START_OPTS -Dowl.metrics.kafka.servers=fat-kafka1.ttbike.com.cn:9092,fat-kafka2.ttbike.com.cn:9092,fat-kafka3.ttbike.com.cn:9092"
START_OPTS="$START_OPTS -Denv=fat"


if [ "$1" == "docker_start" ]; then
    START_OPTS="$START_OPTS -Ddubbo.server.port=9997"
    if [[ x"$POD_MEM" != x"" ]]
    then
        MEM_SIZE=$(( $POD_MEM/1024 ))
    fi
    if [[ x"$POD_CPU" != x"" ]]
    then
        CPU_Count=$POD_CPU
    fi
  
fi
cd ${PROJECT_DIR}

#GCLogParams
GC_LOG_OPTS="-XX:+UseGCLogFileRotation -XX:GCLogFileSize=100M -XX:NumberOfGCLogFiles=3"
#Encoding
ENCODING_PARAM="-Dfile.encoding=UTF-8"


java_mem_opts_x="-Xms512m -Xmx512m -XX:MaxMetaspaceSize=128m -XX:MetaspaceSize=128m"
if [[ x"$java_mem_opts_x" == x"Default" || x"$1" == x"docker_start" ]];then
if [ $MEM_SIZE -gt 100000000 ];then
MEM_OPTS="-Xms81920m -Xmx81920m -XX:MaxMetaspaceSize=2048m -XX:MetaspaceSize=2048m"
elif [ $MEM_SIZE -gt 60000000 ];then
MEM_OPTS="-Xms46960m -Xmx46960m -XX:MaxMetaspaceSize=1024m -XX:MetaspaceSize=1024m"
elif [ $MEM_SIZE -gt 30000000 ];then
MEM_OPTS="-Xms20480m -Xmx20480m -XX:MaxMetaspaceSize=1024m -XX:MetaspaceSize=1024m"
#16G机器
elif [ $MEM_SIZE -gt 14000000 ];then
MEM_OPTS="-Xms10240m -Xmx10240m -XX:MaxMetaspaceSize=1024m -XX:MetaspaceSize=1024m"
#8G机器
elif [ $MEM_SIZE -gt 7000000 ];then
MEM_OPTS="-Xms5120m -Xmx5120m -XX:MaxMetaspaceSize=512m -XX:MetaspaceSize=512m"
#4G机器
elif [ $MEM_SIZE -gt  3000000 ];then
MEM_OPTS="-Xms2560m -Xmx2560m -XX:MaxMetaspaceSize=256m -XX:MetaspaceSize=256m"
#2G机器
elif [ $MEM_SIZE -gt  1000000 ];then
MEM_OPTS="-Xms512m -Xmx512m -XX:MaxMetaspaceSize=128m -XX:MetaspaceSize=128m"
fi
else
MEM_OPTS=$java_mem_opts_x
fi

GC_OPTS="$GC_OPTS -XX:+UseG1GC \
-XX:MaxGCPauseMillis=200 \
-XX:+ParallelRefProcEnabled \
-XX:+HeapDumpOnOutOfMemoryError \
-XX:+PrintClassHistogramBeforeFullGC \
-XX:+PrintClassHistogramAfterFullGC  \
-XX:+PrintGCApplicationConcurrentTime  \
-XX:+PrintGCApplicationStoppedTime \
-XX:+PrintTenuringDistribution \
-XX:+PrintHeapAtGC"


#GC logging
GC_OPTS="$GC_OPTS -Xloggc:${PROJECT_DIR}/logs/gc.log"
GC_OPTS="$GC_OPTS -XX:+PrintGCDateStamps -XX:+PrintGCDetails"
GC_OPTS="$GC_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${PROJECT_DIR}/logs/heapdump.hprof"


#Memory configs
if [ "$1" == "docker_start" ]; then
    if [ "$MEM_OPTS" == "" ]; then
        MEM_OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1 -XX:NewRatio=1 -XX:MaxRAMPercentage=90.0"
    fi
fi


#JMX REMOTE PORT
if [ "$1" == "docker_start" ]; then
    JMX_REMOTE_PORT="5555"
else
    JMX_REMOTE_PORT=5555
fi

#JVM CUSTOMIZE
JVM_CUSTOMIZE="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=10013 -Ddc=0 -Dapp.id=${APP_KEY} -Dkms.host=https://fat-kms-service.m6e.cn"

#coverage
if [[ "$ENABLE_DEBUG" != "true" ]]
then
JVM_CUSTOMIZE="$JVM_CUSTOMIZE -javaagent:/workspace/app/jarlibs/jacoco/jacocoagent.jar=includes=com.m6e.*,output=tcpserver,address=*,port=6300,append=true"
fi


#iast(Interactive Application Security Testing)交互式应用程序安全测试
if test -f "/workspace/app/jarlibs/iast/iast-agent.jar"; then
    JVM_CUSTOMIZE="$JVM_CUSTOMIZE -javaagent:/workspace/app/jarlibs/iast/iast-agent.jar -Dproject.name=${APP_KEY}"
fi

#mock
if test -f "/workspace/app/jarlibs/iast/mock-agent.jar"; then
    JVM_CUSTOMIZE="$JVM_CUSTOMIZE -javaagent:/workspace/app/jarlibs/mock/mock-agent.jar -Dproject.name=${APP_KEY}"
fi


# JMX OPTS
JMX_OPTS="$JMX_OPTS -Dcom.sun.management.jmxremote.port=${JMX_REMOTE_PORT} \
-Dcom.sun.management.jmxremote.authenticate=false \
-Dcom.sun.management.jmxremote.ssl=false \
-Dcom.sun.management.jmxremote=true"

START_OPTS="$START_OPTS -Djava.io.tmpdir=$PROJECT_DIR/temp/"
START_OPTS="$START_OPTS -Duser.dir=$PROJECT_DIR $JVM_CUSTOMIZE"

CLASS_PATH="$PROJECT_DIR/conf:$PROJECT_DIR/lib/*:$CLASS_PATH"
# sort classpath

#classpath='$PROJECT_DIR/conf:'
classpath=""
read_dir(){
    for file in `ls -a $1`
    do
        if [ -d $1"/"$file ]
        then
            if [[ $file != '.' && $file != '..' ]]
            then
                read_dir $1"/"$file
            fi
        else
            classpath+=$1/$file':'
        fi
    done
}
conf_path="$PROJECT_DIR/conf"
lib_path="$PROJECT_DIR/lib"
#read_dir $conf_path
if [ -d "$lib_path" ]; then
    read_dir $lib_path
    sortclasspath=$(eval echo $classpath | tr ':' '\n' | sort)
    if [[ "$CUSTOME_PRE_CLASSPATH" != "" ]]
    then
        sortclasspath=$PROJECT_DIR/conf$CUSTOME_PRE_CLASSPATH$sortclasspath
    else
        sortclasspath=$PROJECT_DIR/conf$sortclasspath
    fi
    sortclasspath=$(eval echo $sortclasspath | tr ' ' ':')
    sortclasspath="$sortclasspath:"
else
    sortclasspath='$PROJECT_DIR/conf:'
fi


# get pid
getPid(){
    if [ -z $1 ]
    then
        echo "Usage: $0 process-pattern" >&2
        exit 1
    fi

    exc_pids="^$$$"
    curr_pid=$$
    while [ $curr_pid -gt 0 ]
    do
        curr_pid=`ps -fwwp $curr_pid|grep -v PPID|awk '{print $3}'`
        exc_pids="$exc_pids|^$curr_pid$"
    done
    curr_script=$0
    curr_script=${curr_script#.}
    curr_script=${curr_script//./\\.}

    if [ $# -eq 1 ]
    then
        ps -efww|grep "\-DAPP_KEY\=$1"|grep java | grep -Ev "grep|$curr_script"|awk '{print $2}'|grep -Ev $exc_pids
    else
        firstArg=$1
        shift
        ps -efww|grep "$firstArg "|grep "\-DAPP_KEY\=$*"|grep java | grep -Ev "grep|$curr_script"|awk '{print $2}'|grep -Ev $exc_pids
    fi
}
# 当发生冲突，start会调用此函数，并将冲突的信息输出到文件中，包括（冲突事件,进程号,运行用户,进程名称等）
getNameFromPid(){
   nowTime1=$(date)
   tips="冲突时间"
   printf "冲突进程信息请查看:/tmp/startCrash.log\n"

   echo $tips$nowTime1 >> /tmp/startCrash.log
   echo "冲突进程数量：" $# >> /tmp/startCrash.log

   for loop in $*
   do
       ps -ef|grep $loop|grep -v grep >> /tmp/startCrash.log
   done
}

#return value
retval=0

# start the server
start(){
    printf 'Starting the server\n'
    pids=`getPid $APP_KEY`
    if ! [ -z "$pids" ];then
        printf 'Existing process: %d\n' "$pids"
        getNameFromPid $pids
        retval=1
    else
        
        JAVA_CMD="nohup java -server $MEM_OPTS $ENCODING_PARAM $GC_OPTS $GC_LOG_OPTS $JMX_OPTS $START_OPTS -classpath $sortclasspath $MAIN_CLASS"
        JAVA_CMD+=" > $PROJECT_DIR/logs/jvm_std.log 2>&1 &"
        #JAVA_CMD="nohup java -server $MEM_OPTS $ENCODING_PARAM $GC_OPTS $JMX_OPTS $START_OPTS -classpath $CLASS_PATH $MAIN_CLASS > $PROJECT_DIR/logs/jvm_std.log 2>&1 &"

        echo $JAVA_CMD
        /bin/su $USER -c "mkdir -p $PROJECT_DIR/temp/"
        /bin/su $USER -c "mkdir -p $PROJECT_DIR/logs/"
        /bin/su $USER -c "$JAVA_CMD"
        echo "Process pid: `getPid $APP_KEY`"
        sleep 3
        if [ -z `getPid $APP_KEY` ]
        then
            echo "Failed to start the server"
            #status_delete
            retval=1
        else
            echo "Finish $0"
            #status_create
            retval=0
        fi
    fi
}

docker_start() {
    JAVA_CMD="java -server $MEM_OPTS $ENCODING_PARAM $GC_OPTS $GC_LOG_OPTS $JMX_OPTS $START_OPTS -classpath $sortclasspath $MAIN_CLASS"
    echo "${JAVA_CMD}"
    exec bash -c "${JAVA_CMD}"
}

# status.ok create
status_create(){
    status_delete
    touch ${PROJECT_DIR}/.status.ok
}

# status.ok delete
status_delete(){
    if [ -f "${PROJECT_DIR}/.status.ok" ]; then
        /bin/rm -f ${PROJECT_DIR}/.status.ok
    fi
}

# stop the server
stop(){
    #status_delete
    printf 'Stopping the server\n'
    pids=`getPid $APP_KEY`
    if [ -z "$pids" ]
    then
        printf 'process is not running\n'
        retval=0
    else
        #stop
        max_loop=10
        for ((i=0; i<$max_loop; i++))
        do
            pids=`getPid $APP_KEY`
            if [ -z "$pids" ]
            then
                break;
            fi

            if [ $i -gt 5 ]
            then
                _9="-9"
            fi

            for pid in $pids
            do
                echo "Kill process with pid:$pid and pattern:$MAIN_CLASS"
                if ! kill $_9 $pid
                then
                    echo "Failed kill process with pid:$pid and pattern:$MAIN_CLASS"
                else
                    echo "Succeed kill process with pid:$pid and pattern:$MAIN_CLASS"
                fi
            done

            sleep 3
        done

        if [ $i -eq $max_loop ]
        then
            echo "Failed kill the processes $pids after try $max_loop times"
            retval=1
        else
            retval=0
        fi
    fi
}

# status for server
status(){
    pids=`getPid $APP_KEY`
    if ! [ -z "$pids" ];then
        printf 'server is running: %d\n' "$pids"
    else
        printf 'server is stopped\n'
    fi
}

user_exists(){
        if id -u $1 >/dev/null 2>&1; then
        echo "1"
        else
                echo "0"
        fi
}

# dispatch the command
case "$1" in
    start)
    start
    ;;
    stop)
    stop
    ;;
    status)
    status
    ;;
    restart)
    stop
    start
    ;;
    docker_start)
    docker_start
    ;;
    *)
    printf 'Usage: %s {start|stop|restart|status|docker_start}\n'
    exit 1
    ;;
esac

exit "$retval"